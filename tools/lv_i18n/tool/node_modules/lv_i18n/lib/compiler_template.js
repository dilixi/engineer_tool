'use strict';


const _  = require('lodash');

const { create_c_plural_fn } = require('./plurals');


// en-GB => en_gb
function to_c(locale) {
  return locale.toLowerCase().replace(/-/g, '_');
}

// escape C string to write all in one line.
function esc(str) {
  // TODO: simple & dirty, should be improved.
  return JSON.stringify(str).slice(1, -1);
}  

function lang_singular_template(l, data) {
  const loc = to_c(l); 
  return `
static const lv_i18n_phrase_t ${loc}_singulars[] = {
${_.map(data[l].singular , (val, k) => `    {${'K_'+esc(k).toUpperCase()}, "${esc(val)}"},`).join('\n')}
    {K_INVALID_ID, NULL} // End mark
};
`.trim();
}


function lang_template(l, data) {
  let pforms = Object.keys(data[l].plural);
  const loc = to_c(l);

  return `
${!_.isEmpty(data[l].singular) ? lang_singular_template(l, data) : ''}

static const lv_i18n_lang_t ${loc}_lang = {
    .locale_name = "${l}",
${!_.isEmpty(data[l].singular) ? `    .singulars = ${loc}_singulars,` : ''}
};
`.trim();
}
//+'='+'0x'+(enum_val++).toString(16)
var enum_val = 1; 
function lang_msg_id_template(l, data) {
  const loc = to_c(l);
  return `
${_.map(data[l].singular, (val, k) => `  ${'K_'+esc(k).toUpperCase()+'=0x'+(("0000" + (+(enum_val++)).toString(16)).substr(-4)).toUpperCase()},`).join('\n')}
`.trim();
}
//("0000" + (+d).toString(16)).substr(-4); 
function msg_id_template(l, data) { 
  const loc = to_c(l);
return `
    ${!_.isEmpty(data[l].singular) ? lang_msg_id_template(l, data) : ''}
`.trim();
}

module.exports.generate_file_c = function (locales, data) {
  return ` 

${locales.map(l => lang_template(l, data)).join('\n\n')}

const lv_i18n_language_pack_t lv_i18n_language_pack[] = {
${locales.map(l => `    &${to_c(l)}_lang,`).join('\n')}
    &custom_lang,
    NULL // End mark
};
`;
};

module.exports.generate_file_head = function (locales, data) {
  return `
typedef enum
{ 
  K_INVALID_ID=0,
  ${msg_id_template(locales, data)}
}singulars_idx_t;
`;
};